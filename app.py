import csvimport jsonclass Attribute:    __cfr = None    __idp = None    __ip = None    __ext = None    __length = None    __width = None    __call_sign = None    __mmsi = None    __owner = None    __company_address = None    __email = None    __captain = None    __contact_phone = None    @property    def captain(self):        return self.__captain    @captain.setter    def captain(self, value):        self.__captain = value    @property    def ext(self):        return self.__ext    @ext.setter    def ext(self, value):        self.__ext = value    @property    def cfr(self):        return self.__cfr    @cfr.setter    def cfr(self, value):        self.__cfr = value    @property    def contact_phone(self):        return self.__contact_phone    @contact_phone.setter    def contact_phone(self, value):        self.__contact_phone = value    @property    def ip(self):        return self.__ip    @ip.setter    def ip(self, value):        self.__ip = value    @property    def length(self):        return self.__length    @length.setter    def length(self, value):        self.__length = value    @property    def width(self):        return self.__width    @width.setter    def width(self, value):        self.__width = value    @property    def idp(self):        return self.__idp    @idp.setter    def idp(self, value):        self.__idp = value    @property    def email(self):        return self.__email    @email.setter    def email(self, value):        self.__email = value    @property    def owner(self):        return self.__owner    @owner.setter    def owner(self, value):        self.__owner = value    @property    def company_address(self):        return self.__company_address    @company_address.setter    def company_address(self, value):        self.__company_address = value    @property    def call_sign(self):        return self.__call_sign    @call_sign.setter    def call_sign(self, value):        self.__call_sign = value    @property    def mmsi(self):        return self.__mmsi    @mmsi.setter    def mmsi(self, value):        self.__mmsi = valuedef transliterate_bulgarian_to_english(text):    # Транслитерационна таблица за български букви    transliteration_table = {        'А': 'A', 'Б': 'B', 'В': 'V', 'Г': 'G', 'Д': 'D', 'Е': 'E', 'Ж': 'ZH', 'З': 'Z',        'И': 'I', 'Й': 'Y', 'К': 'K', 'Л': 'L', 'М': 'M', 'Н': 'N', 'О': 'O', 'П': 'P',        'Р': 'R', 'С': 'S', 'Т': 'T', 'У': 'U', 'Ф': 'F', 'Х': 'H', 'Ц': 'TS', 'Ч': 'CH',        'Ш': 'SH', 'Щ': 'SHT', 'Ъ': 'A', 'Ь': 'Y', 'Ю': 'YU', 'Я': 'YA',        'а': 'a', 'б': 'b', 'в': 'v', 'г': 'g', 'д': 'd', 'е': 'e', 'ж': 'zh', 'з': 'z',        'и': 'i', 'й': 'y', 'к': 'k', 'л': 'l', 'м': 'm', 'н': 'n', 'о': 'o', 'п': 'p',        'р': 'r', 'с': 's', 'т': 't', 'у': 'u', 'ф': 'f', 'х': 'h', 'ц': 'ts', 'ч': 'ch',        'ш': 'sh', 'щ': 'sht', 'ъ': 'a', 'ь': 'y', 'ю': 'yu', 'я': 'ya'    }    # Транслитерация на текста    result = []    for char in text:        if char in transliteration_table:            result.append(transliteration_table[char])        else:            result.append(char)    return ''.join(result)print(transliterate_bulgarian_to_english("ЦИКЛАМА VII"))# CFR,IDP,IP,ВЪНШНА МАРКИРОВКА,ИМЕ НА КОРАБ,ДЪЛЖИНА,ШИРИНА,CALL SIGN/MMSI,КОРАБОСОБСТВЕНИК,АДРЕС НА ФИРМАТА,E-MAIL,КАПИТАН ПО УДОСТОВЕРЕНИЕ,ТЕЛ. ЗА ВРЪЗКАvessel = {    "id": 0,    "name": "string",    "uniqueId": "string",    "status": "string",    "disabled": True,    "lastUpdate": "2019-08-24T14:15:22Z",    "positionId": 0,    "groupId": 0,    "phone": "string",    "model": "string",    "contact": "string",    "category": "string",    "attributes": {}}attribute = {    "cfr": "BGR002030258",    "ext": "BS 258",    "callSign": "LZTP",    "name": "RK 40",    "fPerm": "02104117-013/04.01.2019",    "length": "25.5",    "weight": "6.8",    "deep": "2.39",    "gt": "117.36"}attributes = []# {# 	"2": {# 		"id": 12,# 		"attributes": {# 			"cfr": "BGR002030258",# 			"ext": "BS 258",# 			"callSign": "LZTP",# 			"name": "RK 40",# 			"fPerm": "02104117-013/04.01.2019",# 			"length": "25.5",# 			"weight": "6.8",# 			"deep": "2.39",# 			"gt": "117.36"# 		},# 		"groupId": 1,# 		"calendarId": 0,# 		"name": "РК 40",# 		"uniqueId": "01435476SKYC2E1",# 		"status": "unknown",# 		"lastUpdate": "2024-01-24T13:06:32.986+00:00",# 		"positionId": 14065,# 		"phone": "359898677106",# 		"model": "fish boat",# 		"contact": null,# 		"category": "boat",# 		"disabled": false,# 		"expirationTime": null# 	}# }csv_file_path = 'data/vessels.csv'data = []with open(csv_file_path, mode='r', encoding='utf-8') as file:    # Създаване на CSV четател    csv_reader = csv.reader(file)    # Пропускане на заглавния ред    next(csv_reader)    # Прочитане на данните от CSV файла и добавяне към списъка data    for row in csv_reader:        data.append(row)# Пример: Извеждане на първите 5 реда от даннитеfor row in data:    attribute = Attribute()    call_sign = mmsi = ""    cfr, idp, ip, external_marking, ship_name, length, width, call_sign_mmsi, ship_owner, company_address, email, captain, contact_phone = row    try:        call_sign, mmsi = str(call_sign_mmsi).split("/")    except Exception:        pass    attribute.cfr = cfr    attribute.idp = idp    attribute.ip = ip    attribute.ext = external_marking    attribute.name = ship_name    attribute.length = length    attribute.width = width    attribute.call_sign = call_sign    attribute.mmsi = mmsi    attribute.owner = ship_owner    attribute.company_address = company_address    attribute.email = email    attribute.captain = captain    attribute.contact_phone = contact_phone    attributes.append(attribute.__dict__)print(attributes)